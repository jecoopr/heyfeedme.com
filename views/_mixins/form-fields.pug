mixin subdocField(field, fieldScope, data, i)
  -var schema = field.schema.paths
  if data
    -var schemaPopulated = filters.db.schemaPopulated(data, schema)
  +formFieldsFromSchema(
    filters.stripPrivates(schemaPopulated || schema),
    'fg-subfg',
    fieldScope,
    i
  )

mixin formFieldFile(val, options, sName, siName)
  .form-field.ff-wide.js-file-field
    input(
      type='file'
      name=`${sName}-file`
    ).js-form-file
    input(
      type='hidden'
      name=sName
      value=val
    )
    div(class=val ? 'active' : null).form-file-remove.js-form-file-x
      span Remove
      i.icon.fa.fa-times.
    if options.file === 'image' && val
      img(src=`${val}`).form-field.ff-wide
    else
      p= val

mixin formFieldStringNum(val, options, sName, siName)
  if Array.isArray(options.type)
    - options = options.type[0]

  if options.maxlength
    .form-maxlength.js-remain
      p.js-remaining
        =val ? options.maxlength - val.length : options.maxlength

  if options.longText
    textarea(
      id=siName
      name=sName
      maxlength=options.maxlength
    ).form-field.ff-wide= val

  else if options.file
    +formFieldFile(val, options, sName, siName)

  else
    input(
      id=siName
      name=sName
      type='text'
      value=val
      maxlength=options.maxlength
    ).form-field.ff-wide

mixin formFieldsFromSchema(fields, fgClass, fieldScope, i)
  each field, key in fields
    -var type = field.instance
    -var sName = fieldScope ? `${fieldScope}.${key}` : key
    -var siName = i !== undefined ? `${i}${sName}` : sName

    .form-group(class=fgClass)
      label(for=siName).label.heading.h4= key
        if type === 'Array'
          span= ` (${field.data.length})`

      if field.options.note
        .note.note-s1
          p= field.options.note

      case type
        //- Arrays.
        when 'Array'
          .form-group-array

            //- Subdocument array.
            if field.$isMongooseDocumentArray
              div(class=`js-form-add-${key}`).js-sortable
                each value, i in field.data.length ? field.data : [undefined]
                  +uiList(null, true, true)
                    .form-group.fg-spread.fg-subfg-wrap(class=`fg-${key}`)
                      +subdocField(field, key, value, i)
              +uiAddMore(key)

            //- Enumerable array.
            else if field.caster.enumValues && field.caster.enumValues.length
              .form-group.fg-spread
                each option in field.caster.enumValues
                  .form-group
                    label(for=siName + option).label-2= option
                    input(
                      type='checkbox'
                      id=`${siName}${option}`
                      name=sName
                      value=option
                      checked=field.data && field.data.indexOf(option) > -1
                    ).no-space

            //- ObjectIds (refs).
            else if field.caster.instance === 'ObjectID'
              - var ref = field.caster.options.ref
              label.label-ref: a(href=`/admin/${ref}s` target='_blank')=  ref
              .form-group(
                class=`js-form-add-${key} js-form-suggest suggest-wrap`
                data-ref=ref.toLowerCase()
              )
                each value in field.data.length ? field.data : [undefined]
                  +uiList(null, true, false)
                    .input-group
                      input(
                        type='hidden'
                        name=sName
                        value=filters.i.getNested(value, '_id')
                        id=`ref${siName}`
                      )
                      +formFieldStringNum(filters.i.getNested(value, 'defaultName'), field.options, '', siName)
              +uiAddMore(key)

            //- Catchall
              TODO: Make this work for all remaining types - not just str/num.
                Should be able to use +formFieldsFromSchema(args).
            else
              .form-group(class=`js-form-add-${key}`).js-sortable
                each value in field.data.length ? field.data : [undefined]
                  -var maxlength = field.options.type[0].maxlength
                  +uiList(maxlength ? 'maxlength' : null, true, true)
                    +formFieldStringNum(value, field.options, sName, siName)
              +uiAddMore(key)

        //- Bools.
        when 'Boolean'
          .form-field.ff-wide: input(
              id=siName
              name=sName
              type='checkbox'
              checked=field.data
            )

        //- Dates.
        when 'Date'
          if field.options.fixed
            input(
              id=siName
              type='text'
              value=field.data ? filters.moment(field.data).format('MMMM DD YYYY HH:mm:ss') : null
              readonly
            ).form-field.ff-wide
            if field.options.current
              input(
                type='hidden'
                name=siName
                value='dateCurrent'
              )
            else if field.options.dependent
              input(
                type='hidden'
                name=siName
                value=field.data ? filters.moment(field.data).format('MMMM DD YYYY HH:mm:ss') : null
              )
          else
            input(
              id=siName
              name=sName
              type='date'
              value=filters.moment(field.data).format('YYYY-MM-DD')
            ).form-field.ff-wide

        //- Strings.
        when 'String'
          +formFieldStringNum(field.data, field.options, sName, siName)

        //- Numbers.
        when 'Number'
          +formFieldStringNum(field.data, field.options, sName, siName)

        //- ObjectIds (refs).
        when 'ObjectID'
          label.label-ref: a(href=`/admin/${field.options.ref}s` target='_blank')
            =field.options.ref
          .input-group(
            class=`js-form-add-${key} js-form-suggest suggest-wrap`
            data-ref=field.options.ref.toLowerCase()
          )
            p= field.value
            .input-group
              input(
                type='hidden'
                name=sName
                value=filters.i.getNested(field, 'data.id')
                id=`ref${siName}`
              )
              +formFieldStringNum(filters.i.getNested(field, 'data.defaultName'), field.options, '', siName)

        //- Subdocument.
        when 'Embedded'
          if field.options.file
            +formFieldFile(field.data, field.options, sName, siName)

          else
            .form-group-embedded.form-group.fg-spread
              +subdocField(field, key, field.data)
