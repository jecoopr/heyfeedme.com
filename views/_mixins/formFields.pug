mixin subdocField(field, fieldScope)
  +formFieldsFromSchema(field.schema.paths, 'fg-subfg', fieldScope)

mixin formFieldsFromSchema(fields, fgClass, fieldScope)
  each field, key in fields
    -var type = field.instance
    -var sName = fieldScope ? `${fieldScope}.${key}` : key

    .form-group(class=fgClass)
      label(for=sName).label.heading.h4= key

      if type === 'Array'
        if field.$isMongooseDocumentArray
          .form-group.fg-subfg-wrap(class=`fg-${key}`)
            +subdocField(field, key)

        else if field.caster.enumValues && field.caster.enumValues.length
          .form-group.fg-spread
            each option in field.caster.enumValues
              .form-group
                label(for=sName + option).label-2= option
                input(
                  type='checkbox'
                  id=`${sName}${option}`
                  name=sName
                  value=option
                  checked=field.data && field.data.indexOf(option) > -1
                ).no-space

        else
          .form-group
            each value in field.data
              input(id=key type='text' name=sName value=value).form-field.ff-wide
            input(id=sName type='text' name=sName).form-field.ff-wide

      else if type === 'Boolean'
        input(id=key name=sName type='checkbox').form-field

      else if type === 'Date'
        if field.options.fixed
          input(
            id=sName
            type='text'
            value=filters.moment(field.data).format('MMMM DD YYYY HH:mm:ss')
            readonly
          ).form-field.ff-wide
        else
          input(
            id=key
            name=sName
            type='date'
            value=filters.moment(field.data).format('YYYY-MM-DD')
          ).form-field.ff-wide

      else if type === 'String' || type === 'Number'
        input(id=sName name=sName type='text' value=field.data).form-field.ff-wide
